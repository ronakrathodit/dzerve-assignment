{"ast":null,"code":"var _jsxFileName = \"/Users/ronak/Desktop/dzerve/assignment/src/component/organism/Home/index.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport Input from './input';\nimport { emailText, numberText, pwdText } from '../../../helper/method';\nimport { formSubmit } from '../../../store/Action/master';\nimport { useSelector, useDispatch } from 'react-redux';\nimport ApiAll from '../../../services/loginApi';\nimport { withRouter, Redirect } from 'react-router-dom';\nlet api = new ApiAll();\n\nconst Landing = props => {\n  let dispatch = useDispatch();\n  let getState = useSelector(state => state.Auth.userInfo);\n  let getSuccess = useSelector(state => state.Auth.pageSuccess);\n  const [state, setState] = useState({\n    uniqueId: \"\",\n    pwd: \"\",\n    Cpwd: \"\"\n  }); // form state\n\n  const [error, setError] = useState({});\n  const [emailCheck, setEmailCheck] = useState(null); // email or phone number bases on true false\n\n  const [userCheck, setUserCheck] = useState(null); // check existing user\n\n  const [msg, setMsg] = useState(''); // api false msg\n  // form onChange\n\n  const ChangeInput = (name, value) => {\n    let allState = { ...state\n    };\n\n    if (name === \"uniqueId\") {\n      setEmailCheck(null);\n    }\n\n    allState[name] = value;\n    setState(allState);\n  };\n\n  useEffect(() => {\n    if (getState !== \"\") {\n      setMsg(getState);\n      setTimeout(function () {\n        setMsg('');\n      }, 1000);\n    }\n  }, [getState]); //    useEffect(()=>{\n  //     if(emailCheck!==null ){\n  //         let {uniqueId}=state;\n  //         let payload={    \n  //             \"emailid\":emailCheck?uniqueId:\"\",\n  //             \"mobileno\": !emailCheck?uniqueId:\"\",\n  //             \"type\": emailCheck?\"emailid\":\"mobileno\",\n  //         }\n  //         api.userExist(payload).then(res=>{\n  //             console.log(res,'resData')\n  //             if(res.success){\n  //                 setUserCheck(true)\n  //                 setMsg('')\n  //             }else{\n  //                 setUserCheck(false)\n  //                 setMsg(res.result)\n  //                 setTimeout(function(){ \n  //                     setMsg('')\n  //                 }, 1000);\n  //             }\n  //         }).catch(error=>{\n  //             console.log(error)\n  //         })\n  //     }\n  //    },[emailCheck])  \n  // blur function   \n\n  const validate = (name, value) => {\n    let type = name;\n    let errorMsg = { ...error\n    };\n\n    if (type === \"uniqueId\") {\n      let emailCheck = null;\n\n      if (value === \"\") {\n        errorMsg['uniqueIdError'] = \"Please enter email id/phone number\";\n      } else if (numberText(value)) {\n        if (value.length !== 10) {\n          errorMsg['uniqueIdError'] = \"Please enter 10 digit phone number\";\n          emailCheck = null;\n        } else {\n          errorMsg['uniqueIdError'] = \"\";\n          emailCheck = false;\n        }\n      } else {\n        let EmailCheck = emailText(value);\n\n        if (!EmailCheck) {\n          errorMsg['uniqueIdError'] = \"Please enter email id/phone number\";\n          emailCheck = null;\n        } else {\n          errorMsg['uniqueIdError'] = \"\";\n          emailCheck = true;\n        }\n      }\n\n      setEmailCheck(emailCheck);\n      setError(errorMsg);\n    }\n\n    if (type === \"pwd\") {\n      if (value === \"\") {\n        errorMsg['pwdError'] = \"Please enter password\";\n      } else if (!pwdText(value)) {\n        errorMsg['pwdError'] = \"Entered password doesn't not match criteria \";\n      } else {\n        errorMsg['pwdError'] = \"\";\n      }\n\n      setError(errorMsg);\n    }\n\n    if (type === \"Cpwd\") {\n      if (value === \"\") {\n        errorMsg['CpwdError'] = \"Please enter password\";\n      } else if (!pwdText(value)) {\n        errorMsg['CpwdError'] = \"Entered password doesnt not match criteria\";\n      } else if (value !== state.pwd) {\n        errorMsg['CpwdError'] = \"Password and confirm password field should be match\";\n      } else {\n        errorMsg['CpwdError'] = \"\";\n      }\n\n      setError(errorMsg);\n    }\n  };\n\n  const FormValid = () => {\n    let isValid = false;\n    let errorMsg = { ...error\n    };\n    let {\n      uniqueId,\n      pwd,\n      Cpwd\n    } = state;\n    let ECheck = emailText(uniqueId);\n    let pwdcheck = pwdText(pwd);\n    let pwdcheck1 = pwdText(Cpwd);\n\n    if (uniqueId === \"\") {\n      errorMsg['uniqueIdError'] = \"Please enter email id/phone number\";\n    } else if (emailCheck && !ECheck) {\n      errorMsg['uniqueIdError'] = \"Please enter email id/phone number\";\n    } else if (!emailCheck && uniqueId.length !== 10) {\n      errorMsg['uniqueIdError'] = \"Please enter email id/phone number\";\n    } else if (pwd === \"\") {\n      errorMsg['pwdError'] = \"Please enter password\";\n    } else if (!pwdcheck) {\n      errorMsg['pwdError'] = \"Entered password doesn't not match criteria\";\n    } else if (Cpwd === \"\") {\n      errorMsg['CpwdError'] = \"Please enter password\";\n    } else if (!pwdcheck1) {\n      errorMsg['CpwdError'] = \"Entered password doesn't not match criteria\";\n    } else if (pwd !== state.pwd) {\n      errorMsg['CpwdError'] = \"Password and confirm password field should be match\";\n    } else {\n      errorMsg['uniqueIdError'] = \"\";\n      errorMsg['pwdError'] = \"\";\n      errorMsg['CpwdError'] = \"\";\n      isValid = true;\n    }\n\n    setError(errorMsg);\n    return isValid;\n  };\n\n  const submitbtn = () => {\n    let checkF = FormValid();\n\n    if (checkF) {\n      let payload = {\n        \"emailid\": emailCheck ? state.uniqueId : \"\",\n        \"mobileno\": !emailCheck ? state.uniqueId : \"\",\n        \"type\": emailCheck ? \"emailid\" : \"mobileno\",\n        \"password\": state.Cpwd\n      };\n      dispatch(formSubmit(payload));\n    }\n  };\n\n  console.log(msg, 'MSG');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, getSuccess ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"card-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 11\n    }\n  }, \"Password update successfully.\"))) : /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    label: \"EmailID / Phone\",\n    type: \"text\",\n    name: \"uniqueId\",\n    value: state.uniqueId,\n    onChange: ChangeInput,\n    validate: validate,\n    error: error['uniqueIdError'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    label: \"Password\",\n    type: \"text\",\n    name: \"pwd\",\n    value: state.pwd,\n    onChange: ChangeInput,\n    validate: validate,\n    error: error['pwdError'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 18\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    label: \"Confirm Password\",\n    type: \"text\",\n    name: \"Cpwd\",\n    value: state.Cpwd,\n    onChange: ChangeInput,\n    validate: validate,\n    error: error['CpwdError'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 18\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 16\n    }\n  }, \"   Note: \\u2022 Min:1 lowercase and 1 uppercase alphabet \\u2022 Min: 1 number \\u2022 Min: 1 special character \\u2022 8-16 character length \\u2022 Shouldn\\u2019t be the same as uniqueId \\u2022 Shouldn\\u2019t be the same as last password\")), msg !== \"\" ? /*#__PURE__*/React.createElement(\"div\", {\n    class: \"alert alert-warning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 27\n    }\n  }, msg) : null, /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 17\n    }\n  }, getState.fStatus ? \"Please Wait\" : null, /*#__PURE__*/React.createElement(\"button\", {\n    name: \"submit\",\n    type: \"button\",\n    onClick: submitbtn,\n    id: \"contact-submit\",\n    \"data-submit\": \"...Sending\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 17\n    }\n  }, \"Submit\"))));\n};\n\nexport default withRouter(Landing);","map":{"version":3,"sources":["/Users/ronak/Desktop/dzerve/assignment/src/component/organism/Home/index.js"],"names":["React","useState","useEffect","Fragment","Input","emailText","numberText","pwdText","formSubmit","useSelector","useDispatch","ApiAll","withRouter","Redirect","api","Landing","props","dispatch","getState","state","Auth","userInfo","getSuccess","pageSuccess","setState","uniqueId","pwd","Cpwd","error","setError","emailCheck","setEmailCheck","userCheck","setUserCheck","msg","setMsg","ChangeInput","name","value","allState","setTimeout","validate","type","errorMsg","length","EmailCheck","FormValid","isValid","ECheck","pwdcheck","pwdcheck1","submitbtn","checkF","payload","console","log","fStatus"],"mappings":"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","sourcesContent":["import React,{useState,useEffect,Fragment} from 'react';\nimport Input from './input';\nimport {emailText,numberText,pwdText} from '../../../helper/method';\nimport {formSubmit} from '../../../store/Action/master';\nimport {useSelector, useDispatch} from 'react-redux';\nimport ApiAll from '../../../services/loginApi';\nimport {withRouter,Redirect} from 'react-router-dom';\nlet  api= new ApiAll();\n\nconst Landing=(props)=>{\n    let dispatch=useDispatch();\n    let getState=useSelector(state=>state.Auth.userInfo);\n    let getSuccess=useSelector(state=>state.Auth.pageSuccess);\n    const [state,setState]=useState({uniqueId:\"\",pwd:\"\",Cpwd:\"\"}) // form state\n    const [error,setError]=useState({});\n    const [emailCheck,setEmailCheck]=useState(null); // email or phone number bases on true false\n    const [userCheck,setUserCheck]=useState(null); // check existing user\n    const [msg,setMsg]=useState(''); // api false msg\n    \n\n    // form onChange\n    const ChangeInput=(name,value)=>{\n        let allState={...state}\n        if(name===\"uniqueId\"){\n            setEmailCheck(null);\n        }\n        allState[name]=value\n        setState(allState)\n       }\n       useEffect(()=>{\n          \n        if(getState!==\"\"){\n            setMsg(getState)\n            setTimeout(function(){ \n                setMsg('')\n            }, 1000);\n        }\n       },[getState])\n\n    //    useEffect(()=>{\n          \n    //     if(emailCheck!==null ){\n    //         let {uniqueId}=state;\n    //         let payload={    \n    //             \"emailid\":emailCheck?uniqueId:\"\",\n    //             \"mobileno\": !emailCheck?uniqueId:\"\",\n    //             \"type\": emailCheck?\"emailid\":\"mobileno\",\n    //         }\n    //         api.userExist(payload).then(res=>{\n    //             console.log(res,'resData')\n    //             if(res.success){\n    //                 setUserCheck(true)\n    //                 setMsg('')\n    //             }else{\n    //                 setUserCheck(false)\n    //                 setMsg(res.result)\n    //                 setTimeout(function(){ \n    //                     setMsg('')\n    //                 }, 1000);\n    //             }\n    //         }).catch(error=>{\n    //             console.log(error)\n    //         })\n    //     }\n    //    },[emailCheck])  \n       \n    \n\n    // blur function   \n    const validate=(name,value)=>{\n        let type =name;\n        let errorMsg={...error};\n        if(type===\"uniqueId\"){\n            let emailCheck=null;\n            if(value===\"\"){\n                errorMsg['uniqueIdError']=\"Please enter email id/phone number\"\n            }else if(numberText(value)){\n                if(value.length!==10){\n                    errorMsg['uniqueIdError']=\"Please enter 10 digit phone number\";\n                    emailCheck=null;\n                }else{\n                    errorMsg['uniqueIdError']=\"\";\n                    emailCheck=false;\n                }\n\n            }else{\n                let EmailCheck= emailText(value);\n                if(!EmailCheck){\n                    errorMsg['uniqueIdError']=\"Please enter email id/phone number\"\n                    emailCheck=null;\n                }else{\n                    errorMsg['uniqueIdError']=\"\";\n                    emailCheck=true;\n                }\n            }\n            setEmailCheck(emailCheck)\n            setError(errorMsg)\n        }\n        if(type===\"pwd\"){\n            if(value===\"\"){\n                errorMsg['pwdError']=\"Please enter password\"\n            }else if(!pwdText(value)){\n                errorMsg['pwdError']=\"Entered password doesn't not match criteria \"\n            }else{\n                errorMsg['pwdError']=\"\";\n            }\n            setError(errorMsg)\n           \n        }   \n\n        if(type===\"Cpwd\"){\n            if(value===\"\"){\n                errorMsg['CpwdError']=\"Please enter password\"\n            }else if(!pwdText(value)){\n                errorMsg['CpwdError']=\"Entered password doesnt not match criteria\"\n            }\n            else if(value!==state.pwd){\n                errorMsg['CpwdError']=\"Password and confirm password field should be match\"   \n            }\n            else{\n                errorMsg['CpwdError']=\"\";\n            }\n            setError(errorMsg)\n        }\n        \n        \n    } \n \n const FormValid=()=>{\n     let isValid=false;\n     let errorMsg={...error};\n     let {uniqueId,pwd,Cpwd}=state;\n     let ECheck= emailText(uniqueId);\n    \n    let pwdcheck=pwdText(pwd);\n    let pwdcheck1=pwdText(Cpwd);\n      if(uniqueId===\"\"){\n        errorMsg['uniqueIdError']=\"Please enter email id/phone number\"\n      }else if(emailCheck && !ECheck){\n            errorMsg['uniqueIdError']=\"Please enter email id/phone number\"\n        }\n       \n        else if(!emailCheck && uniqueId.length!==10){\n            errorMsg['uniqueIdError']=\"Please enter email id/phone number\"\n        }else if(pwd===\"\"){\n            errorMsg['pwdError']=\"Please enter password\"\n        }else if(!pwdcheck){\n            errorMsg['pwdError']=\"Entered password doesn't not match criteria\"\n        }\n        else if(Cpwd===\"\"){\n            errorMsg['CpwdError']=\"Please enter password\"\n        }else if(!pwdcheck1){\n            errorMsg['CpwdError']=\"Entered password doesn't not match criteria\"\n        }else if(pwd!==state.pwd){\n            errorMsg['CpwdError']=\"Password and confirm password field should be match\"   \n        }else{\n            errorMsg['uniqueIdError']=\"\";\n            errorMsg['pwdError']=\"\";\n            errorMsg['CpwdError']=\"\";\n            isValid=true;\n        }\n        setError(errorMsg)\n        return isValid\n\n}  \n   \n    \n  const submitbtn=()=>{\n      let checkF=FormValid();\n      if(checkF){\n          let payload=\n            {    \n                \"emailid\": emailCheck?state.uniqueId:\"\",\n                \"mobileno\":!emailCheck?state.uniqueId:\"\",\n                \"type\": emailCheck?\"emailid\":\"mobileno\",\n                \"password\": state.Cpwd            \n            }\n          \n        dispatch(formSubmit(payload))\n      }\n      \n  }   \n  \nconsole.log(msg,'MSG')\n    return(\n        <div className=\"container\">  \n        {getSuccess?\n        <div className=\"card\">\n       <div className=\"card-body\">\n          <h5 className=\"card-title\">Password update successfully.</h5>\n        </div>\n      </div>\n        :\n            <form>\n                \n               \n                <Input\n                    label=\"EmailID / Phone\"\n                    type='text'\n                    name=\"uniqueId\"\n                    value={state.uniqueId}\n                    onChange={ChangeInput}\n                    validate={validate}\n                    error={error['uniqueIdError']}\n                />\n           \n              <Fragment> \n                 <Input\n                    label=\"Password\"\n                    type='text'\n                    name=\"pwd\"\n                    value={state.pwd}\n                    onChange={ChangeInput}\n                    validate={validate}\n                    error={error['pwdError']}\n                />\n                 <Input\n                    label=\"Confirm Password\"\n                    type='text'\n                    name=\"Cpwd\"\n                    value={state.Cpwd}\n                    onChange={ChangeInput}\n                    validate={validate}\n                    error={error['CpwdError']}\n                />\n               \n               \n               \n               <p>   Note:\n                    • Min:1 lowercase and 1 uppercase alphabet\n                    •\tMin: 1 number\n                    •\tMin: 1 special character\n                    •\t8-16 character length\n                    •\tShouldn’t be the same as uniqueId\n                    •\tShouldn’t be the same as last password\n                    </p>\n                </Fragment> \n                {msg!==\"\"?<div class=\"alert alert-warning\">{msg}</div>:null}\n                \n                <fieldset>\n                 {getState.fStatus?\"Please Wait\":null}   \n                <button name=\"submit\" type=\"button\" onClick={submitbtn} id=\"contact-submit\" data-submit=\"...Sending\">Submit</button>\n                </fieldset>\n            </form>}\n            </div>\n    )\n}\nexport default withRouter(Landing)"]},"metadata":{},"sourceType":"module"}